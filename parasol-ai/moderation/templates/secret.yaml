apiVersion: v1
kind: Secret
metadata:
  name: {{ include "moderation.name" . }}
  labels:
    {{- include "moderation.labels" . | nindent 4 }}
type: "Opaque"
stringData:
  application.properties: |-

    kafka.bootstrap.servers={{ .Values.kafka.bootstrapServer }}

    {{- if .Values.kafka.securityProtocol }}
    mp.messaging.connector.smallrye-kafka.security.protocol={{ .Values.kafka.securityProtocol }}
    {{- end }}
    {{- if .Values.kafka.saslMechanism }}
    mp.messaging.connector.smallrye-kafka.sasl.mechanism={{ .Values.kafka.saslMechanism }}
    {{- end }}

    {{- if eq .Values.kafka.saslMechanism "PLAIN" }}
    mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
      username="{{ .Values.kafka.clientId }}" \
      password="{{ .Values.kafka.clientSecret }}" ;
    {{- end }}
    {{- if eq .Values.kafka.saslMechanism "SCRAM-SHA-512" }}
    mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
      username="{{ .Values.kafka.clientId }}" \
      password="{{ .Values.kafka.clientSecret }}" ;
    {{- end }}

    mp.messaging.incoming.intake.topic={{ .Values.kafka.topic.intake }}
    mp.messaging.incoming.intake.group.id={{ .Values.kafka.consumerGroup.intake }}

    mp.messaging.outgoing.outflow.topic={{ .Values.kafka.topic.outflow }}
    mp.messaging.outgoing.error.topic={{ .Values.kafka.topic.error }}

    langchain4j.openai.moderation.base-url={{ .Values.llm.baseUrl }}
    langchain4j.openai.moderation.model-name={{ .Values.llm.modelName }}
    langchain4j.openai.moderation.api-key={{ .Values.llm.apiKey }}
    langchain4j.openai.moderation.timeout={{ .Values.llm.timeout }}
    langchain4j.openai.moderation.max-retries={{ .Values.llm.maxRetries }}
    langchain4j.openai.moderation.log-requests={{ .Values.llm.log.requests }}
    langchain4j.openai.moderation.log-responses={{ .Values.llm.log.responses }}   
